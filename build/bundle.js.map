{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../node_modules/svelte-spa-router/Router.svelte","../../node_modules/regexparam/dist/index.mjs","../../src/core/verbs.js","../../src/core/GameState.js","../../src/core/question-types/FillInTheBlanksQuestion.js","../../src/core/QuestionManager.js","../../src/components/Game.svelte","../../src/components/MainScreen.svelte","../../src/components/VerbListPage.svelte","../../src/components/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nfunction split_css_unit(value) {\n    const split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];\n}\nconst contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\n/**\n * Resize observer singleton.\n * One listener per element only!\n * https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ\n */\nclass ResizeObserverSingleton {\n    constructor(options) {\n        this.options = options;\n        this._listeners = 'WeakMap' in globals ? new WeakMap() : undefined;\n    }\n    observe(element, listener) {\n        this._listeners.set(element, listener);\n        this._getObserver().observe(element, this.options);\n        return () => {\n            this._listeners.delete(element);\n            this._observer.unobserve(element); // this line can probably be removed\n        };\n    }\n    _getObserver() {\n        var _a;\n        return (_a = this._observer) !== null && _a !== void 0 ? _a : (this._observer = new ResizeObserver((entries) => {\n            var _a;\n            for (const entry of entries) {\n                ResizeObserverSingleton.entries.set(entry.target, entry);\n                (_a = this._listeners.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n            }\n        }));\n    }\n}\n// Needs to be written like this to pass the tree-shake-test\nResizeObserverSingleton.entries = 'WeakMap' in globals ? new WeakMap() : undefined;\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction comment(content) {\n    return document.createComment(content);\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_immediate_propagation(fn) {\n    return function (event) {\n        event.stopImmediatePropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction set_dynamic_element_data(tag) {\n    return (/-/.test(tag)) ? set_custom_element_data_map : set_attributes;\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction init_binding_group(group) {\n    let _inputs;\n    return {\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            _inputs.forEach(input => group.push(input));\n        },\n        /* remove */ r() {\n            _inputs.forEach(input => group.splice(group.indexOf(input), 1));\n        }\n    };\n}\nfunction init_binding_group_dynamic(group, indexes) {\n    let _group = get_binding_group(group);\n    let _inputs;\n    function get_binding_group(group) {\n        for (let i = 0; i < indexes.length; i++) {\n            group = group[indexes[i]] = group[indexes[i]] || [];\n        }\n        return group;\n    }\n    function push() {\n        _inputs.forEach(input => _group.push(input));\n    }\n    function remove() {\n        _inputs.forEach(input => _group.splice(_group.indexOf(input), 1));\n    }\n    return {\n        /* update */ u(new_indexes) {\n            indexes = new_indexes;\n            const new_group = get_binding_group(group);\n            if (new_group !== _group) {\n                remove();\n                _group = new_group;\n                push();\n            }\n        },\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            push();\n        },\n        /* remove */ r: remove\n    };\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction claim_comment(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 8, (node) => {\n        node.data = '' + data;\n        return undefined;\n    }, () => comment(data), true);\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    text.data = data;\n}\nfunction set_data_contenteditable(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable(text, data);\n    }\n    else {\n        set_data(text, data);\n    }\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value == null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value, mounting) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    if (!mounting || value !== undefined) {\n        select.selectedIndex = -1; // no option should be selected\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked');\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_iframe_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n            // see https://github.com/sveltejs/svelte/issues/4233\n            fn();\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nconst resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'content-box' });\nconst resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'border-box' });\nconst resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'device-pixel-content-box' });\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            /** #7364  target for <template> may be provided as #document-fragment(11) */\n            else\n                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));\n            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n */\nfunction flush_render_callbacks(fns) {\n    const filtered = [];\n    const targets = [];\n    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n    targets.forEach((c) => c());\n    render_callbacks = filtered;\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    const updates = [];\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            // defer updates until all the DOM shuffling is done\n            updates.push(() => block.p(child_ctx, dirty));\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    run_all(updates);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst _boolean_attributes = [\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n];\n/**\n * List of HTML boolean attributes (e.g. `<input disabled>`).\n * Source: https://html.spec.whatwg.org/multipage/indices.html\n */\nconst boolean_attributes = new Set([..._boolean_attributes]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        flush_render_callbacks($$.after_update);\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    if (has_stop_immediate_propagation)\n        modifiers.push('stopImmediatePropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_contenteditable_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable_dev(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable_dev(text, data);\n    }\n    else {\n        set_data_dev(text, data);\n    }\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, ResizeObserverSingleton, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_iframe_resize_listener, add_location, add_render_callback, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_comment, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, comment, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, contenteditable_truthy_values, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, flush_render_callbacks, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, init_binding_group, init_binding_group_dynamic, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, resize_observer_border_box, resize_observer_content_box, resize_observer_device_pixel_content_box, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_contenteditable, set_data_contenteditable_dev, set_data_dev, set_data_maybe_contenteditable, set_data_maybe_contenteditable_dev, set_dynamic_element_data, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, split_css_unit, spread, src_url_equal, start_hydrating, stop_immediate_propagation, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier} [start]\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=} start\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0 && stop) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let started = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (started) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        started = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n            // We need to set this to false because callbacks can still happen despite having unsubscribed:\n            // Callbacks might already be placed in the queue which doesn't know it should no longer\n            // invoke this derived store.\n            started = false;\n        };\n    });\n}\n/**\n * Takes a store and returns a new one derived from the old one that is readable.\n *\n * @param store - store to make readonly\n */\nfunction readonly(store) {\n    return {\n        subscribe: store.subscribe.bind(store)\n    };\n}\n\nexport { derived, readable, readonly, writable };\n","<script context=\"module\">\nimport {readable, writable, derived} from 'svelte/store'\nimport {tick} from 'svelte'\n\n/**\n * @typedef {Object} Location\n * @property {string} location - Location (page/view), for example `/book`\n * @property {string} [querystring] - Querystring from the hash, as a string not parsed\n */\n/**\n * Returns the current location from the hash.\n *\n * @returns {Location} Location object\n * @private\n */\nfunction getLocation() {\n    const hashPosition = window.location.href.indexOf('#/')\n    let location = (hashPosition > -1) ? window.location.href.substr(hashPosition + 1) : '/'\n\n    // Check if there's a querystring\n    const qsPosition = location.indexOf('?')\n    let querystring = ''\n    if (qsPosition > -1) {\n        querystring = location.substr(qsPosition + 1)\n        location = location.substr(0, qsPosition)\n    }\n\n    return {location, querystring}\n}\n\n/**\n * Readable store that returns the current full location (incl. querystring)\n */\nexport const loc = readable(\n    null,\n    // eslint-disable-next-line prefer-arrow-callback\n    function start(set) {\n        set(getLocation())\n\n        const update = () => {\n            set(getLocation())\n        }\n        window.addEventListener('hashchange', update, false)\n\n        return function stop() {\n            window.removeEventListener('hashchange', update, false)\n        }\n    }\n)\n\n/**\n * Readable store that returns the current location\n */\nexport const location = derived(\n    loc,\n    (_loc) => _loc.location\n)\n\n/**\n * Readable store that returns the current querystring\n */\nexport const querystring = derived(\n    loc,\n    (_loc) => _loc.querystring\n)\n\n/**\n * Store that returns the currently-matched params.\n * Despite this being writable, consumers should not change the value of the store.\n * It is exported as a readable store only (in the typings file)\n */\nexport const params = writable(undefined)\n\n/**\n * Navigates to a new page programmatically.\n *\n * @param {string} location - Path to navigate to (must start with `/` or '#/')\n * @return {Promise<void>} Promise that resolves after the page navigation has completed\n */\nexport async function push(location) {\n    if (!location || location.length < 1 || (location.charAt(0) != '/' && location.indexOf('#/') !== 0)) {\n        throw Error('Invalid parameter location')\n    }\n\n    // Execute this code when the current call stack is complete\n    await tick()\n\n    // Note: this will include scroll state in history even when restoreScrollState is false\n    history.replaceState({...history.state, __svelte_spa_router_scrollX: window.scrollX, __svelte_spa_router_scrollY: window.scrollY}, undefined)      \n    window.location.hash = (location.charAt(0) == '#' ? '' : '#') + location\n}\n\n/**\n * Navigates back in history (equivalent to pressing the browser's back button).\n * \n * @return {Promise<void>} Promise that resolves after the page navigation has completed\n */\nexport async function pop() {\n    // Execute this code when the current call stack is complete\n    await tick()\n\n    window.history.back()\n}\n\n/**\n * Replaces the current page but without modifying the history stack.\n *\n * @param {string} location - Path to navigate to (must start with `/` or '#/')\n * @return {Promise<void>} Promise that resolves after the page navigation has completed\n */\nexport async function replace(location) {\n    if (!location || location.length < 1 || (location.charAt(0) != '/' && location.indexOf('#/') !== 0)) {\n        throw Error('Invalid parameter location')\n    }\n\n    // Execute this code when the current call stack is complete\n    await tick()\n\n    const dest = (location.charAt(0) == '#' ? '' : '#') + location\n    try {\n        const newState = {\n            ...history.state\n        }\n        delete newState['__svelte_spa_router_scrollX']\n        delete newState['__svelte_spa_router_scrollY']\n        window.history.replaceState(newState, undefined, dest)\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn('Caught exception while replacing the current page. If you\\'re running this in the Svelte REPL, please note that the `replace` method might not work in this environment.')\n    }\n\n    // The method above doesn't trigger the hashchange event, so let's do that manually\n    window.dispatchEvent(new Event('hashchange'))\n}\n\n/**\n * Dictionary with options for the link action.\n * @typedef {Object} LinkActionOpts\n * @property {string} href - A string to use in place of the link's href attribute. Using this allows for updating link's targets reactively.\n * @property {boolean} disabled - If true, link is disabled\n */\n\n/**\n * Svelte Action that enables a link element (`<a>`) to use our history management.\n *\n * For example:\n *\n * ````html\n * <a href=\"/books\" use:link>View books</a>\n * ````\n *\n * @param {HTMLElement} node - The target node (automatically set by Svelte). Must be an anchor tag (`<a>`) with a href attribute starting in `/`\n * @param {string|LinkActionOpts} opts - Options object. For legacy reasons, we support a string too which will be the value for opts.href\n */\nexport function link(node, opts) {\n    opts = linkOpts(opts)\n\n    // Only apply to <a> tags\n    if (!node || !node.tagName || node.tagName.toLowerCase() != 'a') {\n        throw Error('Action \"link\" can only be used with <a> tags')\n    }\n\n    updateLink(node, opts)\n\n    return {\n        update(updated) {\n            updated = linkOpts(updated)\n            updateLink(node, updated)\n        }\n    }\n}\n\n/**\n * Tries to restore the scroll state from the given history state.\n *\n * @param {{__svelte_spa_router_scrollX: number, __svelte_spa_router_scrollY: number}} [state] - The history state to restore from.\n */\nexport function restoreScroll(state) {\n    // If this exists, then this is a back navigation: restore the scroll position\n    if (state) {\n        window.scrollTo(state.__svelte_spa_router_scrollX, state.__svelte_spa_router_scrollY)\n    }\n    else {\n        // Otherwise this is a forward navigation: scroll to top\n        window.scrollTo(0, 0)\n    }\n}\n\n// Internal function used by the link function\nfunction updateLink(node, opts) {\n    let href = opts.href || node.getAttribute('href')\n\n    // Destination must start with '/' or '#/'\n    if (href && href.charAt(0) == '/') {\n        // Add # to the href attribute\n        href = '#' + href\n    }\n    else if (!href || href.length < 2 || href.slice(0, 2) != '#/') {\n        throw Error('Invalid value for \"href\" attribute: ' + href)\n    }\n\n    node.setAttribute('href', href)\n    node.addEventListener('click', (event) => {\n        // Prevent default anchor onclick behaviour\n        event.preventDefault()\n        if (!opts.disabled) {\n            scrollstateHistoryHandler(event.currentTarget.getAttribute('href'))\n        }\n    })\n}\n\n// Internal function that ensures the argument of the link action is always an object\nfunction linkOpts(val) {\n    if (val && typeof val == 'string') {\n        return {\n            href: val\n        }\n    }\n    else {\n        return val || {}\n    }\n}\n\n/**\n * The handler attached to an anchor tag responsible for updating the\n * current history state with the current scroll state\n *\n * @param {string} href - Destination\n */\nfunction scrollstateHistoryHandler(href) {\n    // Setting the url (3rd arg) to href will break clicking for reasons, so don't try to do that\n    history.replaceState({...history.state, __svelte_spa_router_scrollX: window.scrollX, __svelte_spa_router_scrollY: window.scrollY}, undefined)\n    // This will force an update as desired, but this time our scroll state will be attached\n    window.location.hash = href\n}\n</script>\n\n{#if componentParams}\n    <svelte:component\n    this={component}\n    params={componentParams}\n    on:routeEvent\n    {...props}\n    />\n{:else}\n    <svelte:component\n    this={component}\n    on:routeEvent\n    {...props}\n    />\n{/if}\n\n<script>\nimport {onDestroy, createEventDispatcher, afterUpdate} from 'svelte'\nimport {parse} from 'regexparam'\n\n/**\n * Dictionary of all routes, in the format `'/path': component`.\n *\n * For example:\n * ````js\n * import HomeRoute from './routes/HomeRoute.svelte'\n * import BooksRoute from './routes/BooksRoute.svelte'\n * import NotFoundRoute from './routes/NotFoundRoute.svelte'\n * routes = {\n *     '/': HomeRoute,\n *     '/books': BooksRoute,\n *     '*': NotFoundRoute\n * }\n * ````\n */\nexport let routes = {}\n\n/**\n * Optional prefix for the routes in this router. This is useful for example in the case of nested routers.\n */\nexport let prefix = ''\n\n/**\n * If set to true, the router will restore scroll positions on back navigation\n * and scroll to top on forward navigation.\n */\nexport let restoreScrollState = false\n\n/**\n * Container for a route: path, component\n */\nclass RouteItem {\n    /**\n     * Initializes the object and creates a regular expression from the path, using regexparam.\n     *\n     * @param {string} path - Path to the route (must start with '/' or '*')\n     * @param {SvelteComponent|WrappedComponent} component - Svelte component for the route, optionally wrapped\n     */\n    constructor(path, component) {\n        if (!component || (typeof component != 'function' && (typeof component != 'object' || component._sveltesparouter !== true))) {\n            throw Error('Invalid component object')\n        }\n\n        // Path must be a regular or expression, or a string starting with '/' or '*'\n        if (!path || \n            (typeof path == 'string' && (path.length < 1 || (path.charAt(0) != '/' && path.charAt(0) != '*'))) ||\n            (typeof path == 'object' && !(path instanceof RegExp))\n        ) {\n            throw Error('Invalid value for \"path\" argument - strings must start with / or *')\n        }\n\n        const {pattern, keys} = parse(path)\n\n        this.path = path\n\n        // Check if the component is wrapped and we have conditions\n        if (typeof component == 'object' && component._sveltesparouter === true) {\n            this.component = component.component\n            this.conditions = component.conditions || []\n            this.userData = component.userData\n            this.props = component.props || {}\n        }\n        else {\n            // Convert the component to a function that returns a Promise, to normalize it\n            this.component = () => Promise.resolve(component)\n            this.conditions = []\n            this.props = {}\n        }\n\n        this._pattern = pattern\n        this._keys = keys\n    }\n\n    /**\n     * Checks if `path` matches the current route.\n     * If there's a match, will return the list of parameters from the URL (if any).\n     * In case of no match, the method will return `null`.\n     *\n     * @param {string} path - Path to test\n     * @returns {null|Object.<string, string>} List of paramters from the URL if there's a match, or `null` otherwise.\n     */\n    match(path) {\n        // If there's a prefix, check if it matches the start of the path.\n        // If not, bail early, else remove it before we run the matching.\n        if (prefix) {\n            if (typeof prefix == 'string') {\n                if (path.startsWith(prefix)) {\n                    path = path.substr(prefix.length) || '/'\n                }\n                else {\n                    return null\n                }\n            }\n            else if (prefix instanceof RegExp) {\n                const match = path.match(prefix)\n                if (match && match[0]) {\n                    path = path.substr(match[0].length) || '/'\n                }\n                else {\n                    return null\n                }\n            }\n        }\n\n        // Check if the pattern matches\n        const matches = this._pattern.exec(path)\n        if (matches === null) {\n            return null\n        }\n\n        // If the input was a regular expression, this._keys would be false, so return matches as is\n        if (this._keys === false) {\n            return matches\n        }\n\n        const out = {}\n        let i = 0\n        while (i < this._keys.length) {\n            // In the match parameters, URL-decode all values\n            try {\n                out[this._keys[i]] = decodeURIComponent(matches[i + 1] || '') || null\n            }\n            catch (e) {\n                out[this._keys[i]] = null\n            }\n            i++\n        }\n        return out\n    }\n\n    /**\n     * Dictionary with route details passed to the pre-conditions functions, as well as the `routeLoading`, `routeLoaded` and `conditionsFailed` events\n     * @typedef {Object} RouteDetail\n     * @property {string|RegExp} route - Route matched as defined in the route definition (could be a string or a reguar expression object)\n     * @property {string} location - Location path\n     * @property {string} querystring - Querystring from the hash\n     * @property {object} [userData] - Custom data passed by the user\n     * @property {SvelteComponent} [component] - Svelte component (only in `routeLoaded` events)\n     * @property {string} [name] - Name of the Svelte component (only in `routeLoaded` events)\n     */\n\n    /**\n     * Executes all conditions (if any) to control whether the route can be shown. Conditions are executed in the order they are defined, and if a condition fails, the following ones aren't executed.\n     * \n     * @param {RouteDetail} detail - Route detail\n     * @returns {boolean} Returns true if all the conditions succeeded\n     */\n    async checkConditions(detail) {\n        for (let i = 0; i < this.conditions.length; i++) {\n            if (!(await this.conditions[i](detail))) {\n                return false\n            }\n        }\n\n        return true\n    }\n}\n\n// Set up all routes\nconst routesList = []\nif (routes instanceof Map) {\n    // If it's a map, iterate on it right away\n    routes.forEach((route, path) => {\n        routesList.push(new RouteItem(path, route))\n    })\n}\nelse {\n    // We have an object, so iterate on its own properties\n    Object.keys(routes).forEach((path) => {\n        routesList.push(new RouteItem(path, routes[path]))\n    })\n}\n\n// Props for the component to render\nlet component = null\nlet componentParams = null\nlet props = {}\n\n// Event dispatcher from Svelte\nconst dispatch = createEventDispatcher()\n\n// Just like dispatch, but executes on the next iteration of the event loop\nasync function dispatchNextTick(name, detail) {\n    // Execute this code when the current call stack is complete\n    await tick()\n    dispatch(name, detail)\n}\n\n// If this is set, then that means we have popped into this var the state of our last scroll position\nlet previousScrollState = null\n\n// Update history.scrollRestoration depending on restoreScrollState\n$: history.scrollRestoration = restoreScrollState ? 'manual' : 'auto'\nlet popStateChanged = null\nif (restoreScrollState) {\n    popStateChanged = (event) => {\n        // If this event was from our history.replaceState, event.state will contain\n        // our scroll history. Otherwise, event.state will be null (like on forward\n        // navigation)\n        if (event.state && (event.state.__svelte_spa_router_scrollY || event.state.__svelte_spa_router_scrollX)) {\n            previousScrollState = event.state\n        }\n        else {\n            previousScrollState = null\n        }\n    }\n    // This is removed in the destroy() invocation below\n    window.addEventListener('popstate', popStateChanged)\n\n    afterUpdate(() => {\n        restoreScroll(previousScrollState)\n    })\n}\n\n// Always have the latest value of loc\nlet lastLoc = null\n\n// Current object of the component loaded\nlet componentObj = null\n\n// Handle hash change events\n// Listen to changes in the $loc store and update the page\n// Do not use the $: syntax because it gets triggered by too many things\nconst unsubscribeLoc = loc.subscribe(async (newLoc) => {\n    lastLoc = newLoc\n\n    // Find a route matching the location\n    let i = 0\n    while (i < routesList.length) {\n        const match = routesList[i].match(newLoc.location)\n        if (!match) {\n            i++\n            continue\n        }\n\n        const detail = {\n            route: routesList[i].path,\n            location: newLoc.location,\n            querystring: newLoc.querystring,\n            userData: routesList[i].userData,\n            params: (match && typeof match == 'object' && Object.keys(match).length) ? match : null\n        }\n\n        // Check if the route can be loaded - if all conditions succeed\n        if (!(await routesList[i].checkConditions(detail))) {\n            // Don't display anything\n            component = null\n            componentObj = null\n            // Trigger an event to notify the user, then exit\n            dispatchNextTick('conditionsFailed', detail)\n            return\n        }\n\n        // Trigger an event to alert that we're loading the route\n        // We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick\n        dispatchNextTick('routeLoading', Object.assign({}, detail))\n\n        // If there's a component to show while we're loading the route, display it\n        const obj = routesList[i].component\n        // Do not replace the component if we're loading the same one as before, to avoid the route being unmounted and re-mounted\n        if (componentObj != obj) {\n            if (obj.loading) {\n                component = obj.loading\n                componentObj = obj\n                componentParams = obj.loadingParams\n                props = {}\n\n                // Trigger the routeLoaded event for the loading component\n                // Create a copy of detail so we don't modify the object for the dynamic route (and the dynamic route doesn't modify our object too)\n                dispatchNextTick('routeLoaded', Object.assign({}, detail, {\n                    component: component,\n                    name: component.name,\n                    params: componentParams\n                }))\n            }\n            else {\n                component = null\n                componentObj = null\n            }\n\n            // Invoke the Promise\n            const loaded = await obj()\n\n            // Now that we're here, after the promise resolved, check if we still want this component, as the user might have navigated to another page in the meanwhile\n            if (newLoc != lastLoc) {\n                // Don't update the component, just exit\n                return\n            }\n\n            // If there is a \"default\" property, which is used by async routes, then pick that\n            component = (loaded && loaded.default) || loaded\n            componentObj = obj\n        }\n\n        // Set componentParams only if we have a match, to avoid a warning similar to `<Component> was created with unknown prop 'params'`\n        // Of course, this assumes that developers always add a \"params\" prop when they are expecting parameters\n        if (match && typeof match == 'object' && Object.keys(match).length) {\n            componentParams = match\n        }\n        else {\n            componentParams = null\n        }\n\n        // Set static props, if any\n        props = routesList[i].props\n\n        // Dispatch the routeLoaded event then exit\n        // We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick\n        dispatchNextTick('routeLoaded', Object.assign({}, detail, {\n            component: component,\n            name: component.name,\n            params: componentParams\n        })).then(() => {\n            params.set(componentParams)\n        })\n        return\n    }\n\n    // If we're still here, there was no match, so show the empty component\n    component = null\n    componentObj = null\n    params.set(undefined)\n})\n\nonDestroy(() => {\n    unsubscribeLoc()\n    popStateChanged && window.removeEventListener('popstate', popStateChanged)\n})\n</script>\n","export function parse(str, loose) {\n\tif (str instanceof RegExp) return { keys:false, pattern:str };\n\tvar c, o, tmp, ext, keys=[], pattern='', arr = str.split('/');\n\tarr[0] || arr.shift();\n\n\twhile (tmp = arr.shift()) {\n\t\tc = tmp[0];\n\t\tif (c === '*') {\n\t\t\tkeys.push('wild');\n\t\t\tpattern += '/(.*)';\n\t\t} else if (c === ':') {\n\t\t\to = tmp.indexOf('?', 1);\n\t\t\text = tmp.indexOf('.', 1);\n\t\t\tkeys.push( tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length) );\n\t\t\tpattern += !!~o && !~ext ? '(?:/([^/]+?))?' : '/([^/]+?)';\n\t\t\tif (!!~ext) pattern += (!!~o ? '?' : '') + '\\\\' + tmp.substring(ext);\n\t\t} else {\n\t\t\tpattern += '/' + tmp;\n\t\t}\n\t}\n\n\treturn {\n\t\tkeys: keys,\n\t\tpattern: new RegExp('^' + pattern + (loose ? '(?=$|\\/)' : '\\/?$'), 'i')\n\t};\n}\n\nvar RGX = /(\\/|^)([:*][^/]*?)(\\?)?(?=[/.]|$)/g;\n\n// error if key missing?\nexport function inject(route, values) {\n\treturn route.replace(RGX, (x, lead, key, optional) => {\n\t\tx = values[key=='*' ? 'wild' : key.substring(1)];\n\t\treturn x ? '/'+x : (optional || key=='*') ? '' : '/' + key;\n\t});\n}\n","// src/verbs.js\nexport const verbs = [\n  {\n    infinitive: \"be\",\n    past: \"was/were\",\n    participle: \"been\",\n    emoji: \"🌟\",\n    themeColor: \"#FFD700\" // Gold\n  },\n  {\n    infinitive: \"begin\",\n    past: \"began\",\n    participle: \"begun\",\n    emoji: \"🚀\",\n    themeColor: \"#FF6B6B\" // Coral\n  },\n  {\n    infinitive: \"break\",\n    past: \"broke\",\n    participle: \"broken\",\n    emoji: \"💔\",\n    themeColor: \"#FF69B4\" // Hot Pink\n  },\n  {\n    infinitive: \"bring\",\n    past: \"brought\",\n    participle: \"brought\",\n    emoji: \"🎁\",\n    themeColor: \"#FFA07A\" // Light Salmon\n  },\n  {\n    infinitive: \"build\",\n    past: \"built\",\n    participle: \"built\",\n    emoji: \"🏗️\",\n    themeColor: \"#CD853F\" // Peru\n  },\n  {\n    infinitive: \"buy\",\n    past: \"bought\",\n    participle: \"bought\",\n    emoji: \"🛒\",\n    themeColor: \"#32CD32\" // Lime Green\n  },\n  {\n    infinitive: \"catch\",\n    past: \"caught\",\n    participle: \"caught\",\n    emoji: \"🎣\",\n    themeColor: \"#1E90FF\" // Dodger Blue\n  },\n  {\n    infinitive: \"choose\",\n    past: \"chose\",\n    participle: \"chosen\",\n    emoji: \"✔️\",\n    themeColor: \"#FFD700\" // Gold\n  },\n  {\n    infinitive: \"do\",\n    past: \"did\",\n    participle: \"done\",\n    emoji: \"✅\",\n    themeColor: \"#00CED1\" // Dark Turquoise\n  },\n  {\n    infinitive: \"draw\",\n    past: \"drew\",\n    participle: \"drawn\",\n    emoji: \"🎨\",\n    themeColor: \"#FF4500\" // Orange Red\n  },\n  {\n    infinitive: \"drink\",\n    past: \"drank\",\n    participle: \"drunk\",\n    emoji: \"🥤\",\n    themeColor: \"#87CEEB\" // Sky Blue\n  },\n  {\n    infinitive: \"drive\",\n    past: \"drove\",\n    participle: \"driven\",\n    emoji: \"🚗\",\n    themeColor: \"#FF6347\" // Tomato\n  },\n  {\n    infinitive: \"eat\",\n    past: \"ate\",\n    participle: \"eaten\",\n    emoji: \"🍔\",\n    themeColor: \"#FFA500\" // Orange\n  },\n  {\n    infinitive: \"fall\",\n    past: \"fell\",\n    participle: \"fallen\",\n    emoji: \"🍂\",\n    themeColor: \"#8B4513\" // Saddle Brown\n  },\n  {\n    infinitive: \"fall over\",\n    past: \"fell over\",\n    participle: \"fallen over\",\n    emoji: \"🤸\",\n    themeColor: \"#FF69B4\" // Hot Pink\n  },\n  {\n    infinitive: \"feed\",\n    past: \"fed\",\n    participle: \"fed\",\n    emoji: \"🍼\",\n    themeColor: \"#FFDAB9\" // Peach Puff\n  },\n  {\n    infinitive: \"feel\",\n    past: \"felt\",\n    participle: \"felt\",\n    emoji: \"🤗\",\n    themeColor: \"#FFC0CB\" // Pink\n  },\n  {\n    infinitive: \"feel like\",\n    past: \"felt like\",\n    participle: \"felt like\",\n    emoji: \"🤔\",\n    themeColor: \"#DDA0DD\" // Plum\n  },\n  {\n    infinitive: \"find\",\n    past: \"found\",\n    participle: \"found\",\n    emoji: \"🔍\",\n    themeColor: \"#FFD700\" // Gold\n  },\n  {\n    infinitive: \"find out\",\n    past: \"found out\",\n    participle: \"found out\",\n    emoji: \"🔎\",\n    themeColor: \"#00CED1\" // Dark Turquoise\n  },\n  {\n    infinitive: \"fly\",\n    past: \"flew\",\n    participle: \"flown\",\n    emoji: \"✈️\",\n    themeColor: \"#87CEEB\" // Sky Blue\n  },\n  {\n    infinitive: \"forget\",\n    past: \"forgot\",\n    participle: \"forgotten\",\n    emoji: \"🧠\",\n    themeColor: \"#D3D3D3\" // Light Gray\n  },\n  {\n    infinitive: \"get\",\n    past: \"got\",\n    participle: \"got\",\n    emoji: \"📥\",\n    themeColor: \"#32CD32\" // Lime Green\n  },\n  {\n    infinitive: \"get dressed\",\n    past: \"got dressed\",\n    participle: \"got dressed\",\n    emoji: \"👗\",\n    themeColor: \"#FF69B4\" // Hot Pink\n  },\n  {\n    infinitive: \"get off\",\n    past: \"got off\",\n    participle: \"got off\",\n    emoji: \"🚪\",\n    themeColor: \"#FF6347\" // Tomato\n  },\n  {\n    infinitive: \"get on\",\n    past: \"got on\",\n    participle: \"got on\",\n    emoji: \"🚂\",\n    themeColor: \"#1E90FF\" // Dodger Blue\n  },\n  {\n    infinitive: \"get to\",\n    past: \"got to\",\n    participle: \"got to\",\n    emoji: \"📍\",\n    themeColor: \"#FFA500\" // Orange\n  },\n  {\n    infinitive: \"get up\",\n    past: \"got up\",\n    participle: \"got up\",\n    emoji: \"⏰\",\n    themeColor: \"#FFD700\" // Gold\n  },\n  {\n    infinitive: \"give\",\n    past: \"gave\",\n    participle: \"given\",\n    emoji: \"🎁\",\n    themeColor: \"#FF69B4\" // Hot Pink\n  },\n  {\n    infinitive: \"go\",\n    past: \"went\",\n    participle: \"gone\",\n    emoji: \"🚶\",\n    themeColor: \"#00CED1\" // Dark Turquoise\n  },\n  {\n    infinitive: \"go out\",\n    past: \"went out\",\n    participle: \"gone out\",\n    emoji: \"🌃\",\n    themeColor: \"#1E90FF\" // Dodger Blue\n  },\n  {\n    infinitive: \"go shopping\",\n    past: \"went shopping\",\n    participle: \"gone shopping\",\n    emoji: \"🛍️\",\n    themeColor: \"#FF69B4\" // Hot Pink\n  },\n  {\n    infinitive: \"grow\",\n    past: \"grew\",\n    participle: \"grown\",\n    emoji: \"🌱\",\n    themeColor: \"#32CD32\" // Lime Green\n  },\n  {\n    infinitive: \"have\",\n    past: \"had\",\n    participle: \"had\",\n    emoji: \"🤲\",\n    themeColor: \"#FFD700\" // Gold\n  },\n  {\n    infinitive: \"have to\",\n    past: \"had to\",\n    participle: \"had to\",\n    emoji: \"⏳\",\n    themeColor: \"#D3D3D3\" // Light Gray\n  },\n  {\n    infinitive: \"hear\",\n    past: \"heard\",\n    participle: \"heard\",\n    emoji: \"👂\",\n    themeColor: \"#FF6347\" // Tomato\n  },\n  {\n    infinitive: \"hide\",\n    past: \"hid\",\n    participle: \"hidden\",\n    emoji: \"🕵️\",\n    themeColor: \"#8B4513\" // Saddle Brown\n  },\n  {\n    infinitive: \"hit\",\n    past: \"hit\",\n    participle: \"hit\",\n    emoji: \"👊\",\n    themeColor: \"#FF4500\" // Orange Red\n  },\n  {\n    infinitive: \"hold\",\n    past: \"held\",\n    participle: \"held\",\n    emoji: \"🤝\",\n    themeColor: \"#FFDAB9\" // Peach Puff\n  },\n  {\n    infinitive: \"know\",\n    past: \"knew\",\n    participle: \"known\",\n    emoji: \"🧠\",\n    themeColor: \"#D3D3D3\" // Light Gray\n  },\n  {\n    infinitive: \"learn\",\n    past: \"learnt\",\n    participle: \"learnt\",\n    emoji: \"📚\",\n    themeColor: \"#FFD700\" // Gold\n  },\n  {\n    infinitive: \"let\",\n    past: \"let\",\n    participle: \"let\",\n    emoji: \"🛑\",\n    themeColor: \"#FF6347\" // Tomato\n  },\n  {\n    infinitive: \"lie\",\n    past: \"lay\",\n    participle: \"lain\",\n    emoji: \"🛌\",\n    themeColor: \"#87CEEB\" // Sky Blue\n  },\n  {\n    infinitive: \"lie down\",\n    past: \"lay down\",\n    participle: \"lain down\",\n    emoji: \"🛏️\",\n    themeColor: \"#1E90FF\" // Dodger Blue\n  },\n  {\n    infinitive: \"lose\",\n    past: \"lost\",\n    participle: \"lost\",\n    emoji: \"😢\",\n    themeColor: \"#FF69B4\" // Hot Pink\n  },\n  {\n    infinitive: \"make\",\n    past: \"made\",\n    participle: \"made\",\n    emoji: \"🔨\",\n    themeColor: \"#CD853F\" // Peru\n  },\n  {\n    infinitive: \"mean\",\n    past: \"meant\",\n    participle: \"meant\",\n    emoji: \"💡\",\n    themeColor: \"#FFD700\" // Gold\n  },\n  {\n    infinitive: \"meet\",\n    past: \"met\",\n    participle: \"met\",\n    emoji: \"🤝\",\n    themeColor: \"#32CD32\" // Lime Green\n  },\n  {\n    infinitive: \"put on\",\n    past: \"put on\",\n    participle: \"put on\",\n    emoji: \"👕\",\n    themeColor: \"#FF69B4\" // Hot Pink\n  },\n  {\n    infinitive: \"read\",\n    past: \"read\",\n    participle: \"read\",\n    emoji: \"📖\",\n    themeColor: \"#FFD700\" // Gold\n  },\n  {\n    infinitive: \"ride\",\n    past: \"rode\",\n    participle: \"ridden\",\n    emoji: \"🚴\",\n    themeColor: \"#1E90FF\" // Dodger Blue\n  },\n  {\n    infinitive: \"run\",\n    past: \"ran\",\n    participle: \"run\",\n    emoji: \"🏃\",\n    themeColor: \"#FF4500\" // Orange Red\n  },\n  {\n    infinitive: \"say\",\n    past: \"said\",\n    participle: \"said\",\n    emoji: \"🗣️\",\n    themeColor: \"#00CED1\" // Dark Turquoise\n  },\n  {\n    infinitive: \"see\",\n    past: \"saw\",\n    participle: \"seen\",\n    emoji: \"👀\",\n    themeColor: \"#87CEEB\" // Sky Blue\n  },\n  {\n    infinitive: \"sell\",\n    past: \"sold\",\n    participle: \"sold\",\n    emoji: \"💰\",\n    themeColor: \"#FFD700\" // Gold\n  },\n  {\n    infinitive: \"send\",\n    past: \"sent\",\n    participle: \"sent\",\n    emoji: \"📤\",\n    themeColor: \"#1E90FF\" // Dodger Blue\n  },\n  {\n    infinitive: \"sing\",\n    past: \"sang\",\n    participle: \"sung\",\n    emoji: \"🎤\",\n    themeColor: \"#FF69B4\" // Hot Pink\n  },\n  {\n    infinitive: \"sit\",\n    past: \"sat\",\n    participle: \"sat\",\n    emoji: \"🪑\",\n    themeColor: \"#8B4513\" // Saddle Brown\n  },\n  {\n    infinitive: \"sleep\",\n    past: \"slept\",\n    participle: \"slept\",\n    emoji: \"😴\",\n    themeColor: \"#87CEEB\" // Sky Blue\n  },\n  {\n    infinitive: \"smell like\",\n    past: \"smelt like\",\n    participle: \"smelt like\",\n    emoji: \"👃\",\n    themeColor: \"#FF69B4\" // Hot Pink\n  },\n  {\n    infinitive: \"speak\",\n    past: \"spoke\",\n    participle: \"spoken\",\n    emoji: \"🗣️\",\n    themeColor: \"#00CED1\" // Dark Turquoise\n  },\n  {\n    infinitive: \"spell\",\n    past: \"spelt\",\n    participle: \"spelt\",\n    emoji: \"🔠\",\n    themeColor: \"#FFD700\" // Gold\n  },\n  {\n    infinitive: \"spend\",\n    past: \"spent\",\n    participle: \"spent\",\n    emoji: \"💸\",\n    themeColor: \"#32CD32\" // Lime Green\n  },\n  {\n    infinitive: \"stand\",\n    past: \"stood\",\n    participle: \"stood\",\n    emoji: \"🧍\",\n    themeColor: \"#8B4513\" // Saddle Brown\n  },\n  {\n    infinitive: \"steal\",\n    past: \"stole\",\n    participle: \"stolen\",\n    emoji: \"🦹\",\n    themeColor: \"#FF6347\" // Tomato\n  },\n  {\n    infinitive: \"swim\",\n    past: \"swam\",\n    participle: \"swum\",\n    emoji: \"🏊\",\n    themeColor: \"#1E90FF\" // Dodger Blue\n  },\n  {\n    infinitive: \"swing\",\n    past: \"swung\",\n    participle: \"swung\",\n    emoji: \"🪀\",\n    themeColor: \"#FF69B4\" // Hot Pink\n  },\n  {\n    infinitive: \"take\",\n    past: \"took\",\n    participle: \"taken\",\n    emoji: \"✋\",\n    themeColor: \"#FFD700\" // Gold\n  },\n  {\n    infinitive: \"take a photo\",\n    past: \"took a photo\",\n    participle: \"taken a photo\",\n    emoji: \"📸\",\n    themeColor: \"#00CED1\" // Dark Turquoise\n  },\n  {\n    infinitive: \"take off\",\n    past: \"took off\",\n    participle: \"taken off\",\n    emoji: \"✈️\",\n    themeColor: \"#87CEEB\" // Sky Blue\n  },\n  {\n    infinitive: \"teach\",\n    past: \"taught\",\n    participle: \"taught\",\n    emoji: \"👩‍🏫\",\n    themeColor: \"#FF69B4\" // Hot Pink\n  },\n  {\n    infinitive: \"tell\",\n    past: \"told\",\n    participle: \"told\",\n    emoji: \"🗨️\",\n    themeColor: \"#00CED1\" // Dark Turquoise\n  },\n  {\n    infinitive: \"think\",\n    past: \"thought\",\n    participle: \"thought\",\n    emoji: \"🤔\",\n    themeColor: \"#D3D3D3\" // Light Gray\n  },\n  {\n    infinitive: \"throw\",\n    past: \"threw\",\n    participle: \"thrown\",\n    emoji: \"⚾\",\n    themeColor: \"#FF4500\" // Orange Red\n  },\n  {\n    infinitive: \"understand\",\n    past: \"understood\",\n    participle: \"understood\",\n    emoji: \"🧠\",\n    themeColor: \"#1E90FF\" // Dodger Blue\n  },\n  {\n    infinitive: \"wake up\",\n    past: \"woke up\",\n    participle: \"woken up\",\n    emoji: \"⏰\",\n    themeColor: \"#FFD700\" // Gold\n  },\n  {\n    infinitive: \"wear\",\n    past: \"wore\",\n    participle: \"worn\",\n    emoji: \"👕\",\n    themeColor: \"#FF69B4\" // Hot Pink\n  },\n  {\n    infinitive: \"win\",\n    past: \"won\",\n    participle: \"won\",\n    emoji: \"🏆\",\n    themeColor: \"#FFD700\" // Gold\n  },\n  {\n    infinitive: \"write\",\n    past: \"wrote\",\n    participle: \"written\",\n    emoji: \"✍️\",\n    themeColor: \"#8B4513\" // Saddle Brown\n  }\n];\n","export class GameState {\n  constructor() {\n    this.currentPhase = 1;\n    this.score = 0;\n    this.unlockedPhases = [1]; // Start with phase 1 unlocked\n    this.storage = typeof localStorage !== 'undefined' ? localStorage : {\n      getItem: () => null,\n      setItem: () => {}\n    };\n    this.phaseVerbs = [];\n    this.load();\n  }\n\n  load() {\n    const saved = this.storage.getItem('verbGameState');\n    if (saved) {\n      const { phase, score, unlocked } = JSON.parse(saved);\n      this.currentPhase = phase;\n      this.score = score;\n      this.unlockedPhases = unlocked;\n    }\n  }\n\n  save() {\n    this.storage.setItem('verbGameState', JSON.stringify({\n      phase: this.currentPhase,\n      score: this.score,\n      unlocked: this.unlockedPhases\n\n    }));\n  }\n\n  getPhaseVerbs(allVerbs) {\n    console.log(this.currentPhase)\n    const newVerbsStart = (this.currentPhase - 1) * 5;\n    const newVerbsEnd = newVerbsStart + 5;\n    \n    // Get new verbs for this phase\n    const newVerbs = allVerbs.slice(newVerbsStart, newVerbsEnd);\n    \n    // Get 5 random verbs from previous phases\n    const previousVerbs = allVerbs.slice(0, newVerbsStart);\n    const reviewVerbs = this.getRandomVerbs(previousVerbs, 5);\n    console.log(newVerbs + \" \" + reviewVerbs)\n    return [...newVerbs, ...reviewVerbs].map(verb => this.normalizeVerb(verb));\n  }\n\n  getRandomVerbs(verbsArray, count) {\n    return [...verbsArray]\n      .sort(() => 0.5 - Math.random())\n      .slice(0, count);\n  }\n\n  checkPhaseProgress(newScore) {\n    const requiredScore = this.currentPhase * 100;\n    if (newScore >= requiredScore) {\n      this.currentPhase++;\n      this.save();\n      return true;\n    }\n    this.save();\n    return false;\n  }\n\n  normalizeVerb(verb) {\n    return {\n      ...verb,\n      infinitiveKey: verb.infinitive.replace(/ /g, '_'),\n      pastKey: verb.past.replace(/ /g, '_'),\n      participleKey: verb.participle.replace(/ /g, '_'),\n      displayInfinitive: verb.infinitive,\n      displayPast: verb.past,\n      displayParticiple: verb.participle\n    };\n  }\n\n  getDisplayForms(verb) {\n    return {\n      infinitive: verb.displayInfinitive,\n      past: verb.displayPast,\n      participle: verb.displayParticiple\n    };\n  }\n  unlockNextPhase() {\n    const nextPhase = this.currentPhase + 1;\n    if (!this.unlockedPhases.includes(nextPhase)) {\n      this.unlockedPhases = [...this.unlockedPhases, nextPhase];\n      this.save();\n    }\n  }\n}\n","export class FillInTheBlanksQuestion {\n  getRandomForm() {\n    const forms = ['infinitive', 'past', 'participle'];\n    return forms[Math.floor(Math.random() * forms.length)];\n  }\n\n  generate(verb) {\n    const revealed = this.getRandomForm();\n    const answerForms = ['infinitive', 'past', 'participle'].filter(f => f !== revealed);\n    \n    return {\n      template: this.createTemplate(verb, revealed, answerForms),\n      answers: this.getAnswers(verb, answerForms),\n      verb\n    };\n  }\n\n  createTemplate(verb, revealed) {\n    let answerIndex = 0;\n    return ['infinitive', 'past', 'participle'].flatMap((form, index, arr) => {\n      const elements = [];\n      \n      if (form === revealed) {\n        elements.push({ \n          type: 'text', \n          value: verb[`display${form.charAt(0).toUpperCase() + form.slice(1)}`] || verb[form] \n        });\n      } else {\n        elements.push({\n          type: 'input',\n          placeholder: `${form}`,\n          expected: verb[`${form}Key`] || verb[form],\n          answerIndex: answerIndex++\n        });\n      }\n  \n      if (index < arr.length - 1) {\n        elements.push({ type: 'separator', value: ', ' });\n      }\n  \n      return elements;\n    });\n  }\n  getAnswers(verb, answerForms) {\n    return answerForms.map(form => verb[`${form}Key`]);\n  }\n\n  check(userAnswers, correctAnswers) {\n    try {\n      return userAnswers.every((answer, index) => {\n        // Normalize user input and compare with stored key\n        const normalizedAnswer = answer\n          .trim()\n          .toLowerCase()\n          .replace(/ /g, '_');\n        return normalizedAnswer === correctAnswers[index].toLowerCase();\n      });\n    } catch {\n      return false;\n    }\n  }\n\n  getHint(attempts, correctAnswers) {\n    const revealedChars = Math.max(0, attempts - 2);\n    return correctAnswers.map(answer => {\n      // Convert internal underscores back to spaces for display\n      const displayAnswer = answer.replace(/_/g, ' ');\n      return displayAnswer\n        .split('')\n        .map((char, index) => index < revealedChars ? char : '_')\n        .join('');\n    });\n  }\n}\n","import { FillInTheBlanksQuestion } from './question-types/FillInTheBlanksQuestion';\n\nexport class QuestionManager {\n  constructor(verbs) {\n    this.verbs = verbs;\n    this.questionTypes = {\n      'fill-blanks': new FillInTheBlanksQuestion()\n    };\n  }\n\n  generateQuestion(phaseVerbs) {\n    if (!phaseVerbs || phaseVerbs.length === 0) {\n      console.error(\"No verbs available for question generation!\");\n      return null;\n    }\n  \n    const verb = this.getRandomVerb(phaseVerbs);\n    const type = 'fill-blanks';\n    const questionData = this.questionTypes[type].generate(verb);\n  \n    console.log(\"Generated question data:\", questionData); // Debug log\n  \n    return {\n      type,\n      ...questionData,\n      verb\n    };\n  }\n\n  checkAnswer(userAnswers, currentQuestion) {\n    if (!currentQuestion || !currentQuestion.answers) {\n      console.error(\"Invalid question or answers:\", currentQuestion);\n      return false;\n    }\n  \n    console.log(\"User answers:\", userAnswers);\n    console.log(\"Correct answers:\", currentQuestion.answers);\n  \n    try {\n      const isCorrect = userAnswers.every((answer, index) => {\n        const normalizedAnswer = answer.trim().toLowerCase();\n        const correctAnswer = currentQuestion.answers[index].toLowerCase();\n        console.log(`Comparing \"${normalizedAnswer}\" with \"${correctAnswer}\"`);\n        return normalizedAnswer === correctAnswer;\n      });\n  \n      console.log(\"Answer is correct:\", isCorrect);\n      return isCorrect;\n    } catch (error) {\n      console.error(\"Error checking answers:\", error);\n      return false;\n    }\n  }\n\n  getHint(attempts, currentQuestion) {\n    if (!currentQuestion || !currentQuestion.type) {\n      console.error(\"Invalid question object:\", currentQuestion);\n      return [];\n    }\n  \n    return this.questionTypes[currentQuestion.type].getHint(\n      attempts,\n      currentQuestion.answers\n    );\n  }\n\n  getRandomVerb(verbs) {\n    return verbs[Math.floor(Math.random() * verbs.length)];\n  }\n}\n","<script>\n  import '../styles/game.css';\n  import { verbs } from \"../core/verbs\";\n  import { GameState } from \"../core/GameState\";\n  import { QuestionManager } from \"../core/QuestionManager\";\n\n  let gameState = new GameState();\n  let questionManager = new QuestionManager(verbs);\n  let currentQuestion = null;\n  let userAnswers = [];\n  let gameStarted = false;\n  let phaseVerbs = [];\n  let score = 0;\n  let attempts = 0;\n  let showHint = false;\n\n  // Initialize the game properly\n  function initializeGame() {\n    phaseVerbs = gameState.getPhaseVerbs(verbs);\n    gameStarted = false; // Ensure the start phase screen is shown\n    score = gameState.score;\n  }\n\n  function startPhase() {\n    gameStarted = true; // Hide the start phase screen\n    nextQuestion(); // Generate the first question\n  }\n\n  function nextQuestion() {\n    if (phaseVerbs.length === 0) return;\n\n    currentQuestion = questionManager.generateQuestion(phaseVerbs);\n\n    // Count only input fields\n    const inputCount = currentQuestion.template.filter(\n      (p) => p.type === \"input\",\n    ).length;\n    userAnswers = new Array(inputCount).fill(\"\");\n\n    attempts = 0;\n    showHint = false;\n  }\n\n  function handleSubmit() {\n    attempts++;\n    if (!currentQuestion) {\n      console.error(\"No current question!\");\n      return;\n    }\n\n    const normalizedAnswers = userAnswers.map((a) => a.trim().toLowerCase().replace(/ /g, '_'));\n    console.log(\"Normalized user answers:\", normalizedAnswers); // Debug log\n\n    const isCorrect = questionManager.checkAnswer(\n      normalizedAnswers,\n      currentQuestion,\n    );\n\n    if (isCorrect) {\n      score += calculateScore();\n      gameState.score = score;\n\n      // Check if we should progress to the next phase\n      const shouldProgress = gameState.checkPhaseProgress(score);\n      if (shouldProgress) {\n        initializeGame(); // Reset for the next phase\n      } else {\n        nextQuestion(); // Continue with the current phase\n      }\n    } else {\n      showHint = attempts >= 3;\n    }\n  }\n\n  function calculateScore() {\n    if (attempts === 1) return 10;\n    if (attempts <= 3) return 5;\n    return 3;\n  }\n\n  // Initialize when component mounts\n  initializeGame();\n</script>\n\n<div class=\"game-container\">\n  {#if !gameStarted}\n    <!-- Phase Start Screen -->\n    <div class=\"phase-start-screen\">\n      <h2>Phase {gameState.currentPhase} Verbs 🌟</h2>\n      <table class=\"verb-table\">\n        <thead>\n          <tr>\n            <th>Infinitive</th>\n            <th>Past</th>\n            <th>Participle</th>\n          </tr>\n        </thead>\n        <tbody>\n          {#each phaseVerbs as verb}\n            <tr class=\"verb-item\">\n              <td>\n                <span class=\"emoji\">{verb.emoji}</span>\n                <strong>{verb.infinitive}</strong>\n              </td>\n              <td>{verb.past}</td>\n              <td>{verb.participle}</td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n      <button on:click={startPhase} class=\"start-button\">\n        🚀 Start Phase {gameState.currentPhase}\n      </button>\n    </div>\n  {:else if currentQuestion}\n    <!-- Question Card -->\n    <div class=\"question-card\">\n      <div class=\"verb-header\">\n        <div class=\"verb-emoji\">{currentQuestion.verb.emoji}</div>\n        <div class=\"score-badge\">⭐ Score: {score}</div>\n        <div class=\"phase-indicator\">Phase {gameState.currentPhase}</div>\n      </div>\n\n      <div class=\"question-content\">\n        {#each currentQuestion.template as part, index}\n          {#if part.type === \"input\"}\n            <input\n              class=\"input-field {showHint ? 'hint-field' : ''}\"\n              bind:value={userAnswers[part.answerIndex]}\n              placeholder={part.placeholder}\n            />\n          {:else if part.type === \"text\"}\n            <span class=\"verb-text\">{part.value}</span>\n          {:else if part.type === \"separator\"}\n            <span class=\"separator\">{part.value}</span>\n          {/if}\n        {/each}\n      </div>\n\n      {#if showHint}\n        <div class=\"hint-box\">\n          {#each questionManager.getHint(attempts, currentQuestion) as hint, i}\n            <span class=\"hint-text\">{hint}</span>\n            {#if i < questionManager.getHint(attempts, currentQuestion).length - 1},\n            {/if}\n          {/each}\n        </div>\n      {/if}\n\n      <button on:click={handleSubmit} class=\"submit-button\">\n        {attempts === 0 ? \"Check Answer\" : \"Try Again\"} ✅\n      </button>\n    </div>\n  {/if}\n</div>\n","<script>\n  import Game from './Game.svelte';\n  import { push } from \"svelte-spa-router\"; // Use `push` instead of `navigate`\n  import { GameState } from \"../core/GameState\";\n  let gameStarted = false;\n  let gameState = new GameState();\n  let score = gameState.score;\n\n  // Function to navigate to the verb list\n  function showVerbList() {\n    push(\"/verb-list\"); // Use `push` to navigate\n  }\n</script>\n\n{#if !gameStarted}\n  <div class=\"main-screen\">\n    <h1 class=\"title\">Verb Master 🌟</h1>\n    \n    <div class=\"rules\">\n      <h2>How to Play:</h2>\n      <ol>\n        <li>Complete each phase by answering verb questions</li>\n        <li>Get points for correct answers</li>\n        <li>Unlock new phases as you progress</li>\n        <li>Use hints after 3 attempts</li>\n      </ol>\n    </div>\n    <div class=\"score-badge\">⭐ Current Score: {score}</div>\n\n    <div class=\"emoji-list\">\n      <span>🏆</span>\n      <span>📚</span>\n      <span>🎯</span>\n      <span>💡</span>\n    </div>\n\n    <button class=\"start-button\" on:click={() => gameStarted = true}>\n      Start Game 🚀\n    </button>\n\n    <!-- Button to navigate to the verb list -->\n    <button class=\"start-button\" on:click={showVerbList}>\n      Show Verb List 📚\n    </button>\n  </div>\n{:else}\n  <Game />\n{/if}\n\n<style>\n  .main-screen {\n    text-align: center;\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 2rem;\n  }\n\n  .start-button {\n    margin: 0.5rem;\n  }\n</style>\n","<script>\n  import { verbs } from \"../core/verbs\";\n  import { push } from \"svelte-spa-router\"; // Use `push` instead of `navigate`\n\n  // Function to go back to the main screen\n  function goBack() {\n    push(\"/\"); // Use `push` to navigate back\n  }\n</script>\n\n<div class=\"verb-list-page\">\n  <h1>Full List of Verb Forms</h1>\n  <button on:click={goBack} class=\"back-button\">⬅️ Back to Main Screen</button>\n  <div class=\"verb-list-scrollable\">\n    <table class=\"verb-table\">\n      <thead>\n        <tr>\n          <th>Infinitive</th>\n          <th>Past</th>\n          <th>Participle</th>\n          <th>Emoji</th>\n        </tr>\n      </thead>\n      <tbody>\n        {#each verbs as verb}\n          <tr class=\"verb-item\">\n            <td>\n              <span class=\"emoji\">{verb.emoji}</span>\n              <strong>{verb.infinitive}</strong>\n            </td>\n            <td>{verb.past}</td>\n            <td>{verb.participle}</td>\n            <td>{verb.emoji}</td>\n          </tr>\n        {/each}\n      </tbody>\n    </table>\n  </div>\n</div>\n\n<style>\n  .verb-list-page {\n    text-align: center;\n    padding: 2rem;\n    max-width: 800px;\n    margin: 0 auto;\n  }\n\n  .back-button {\n    background: #ff6f61;\n    color: white;\n    padding: 0.5rem 1rem;\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n    margin-bottom: 1rem;\n    font-size: 1rem;\n  }\n\n  .back-button:hover {\n    background: #ff4a3d;\n  }\n\n  .verb-list-scrollable {\n    max-height: 70vh;\n    overflow-y: auto;\n    border: 1px solid #eee;\n    border-radius: 8px;\n    margin-top: 1rem;\n  }\n\n  .verb-table {\n    width: 100%;\n    border-collapse: collapse;\n    background: white;\n    table-layout: fixed;\n  }\n\n  .verb-table th,\n  .verb-table td {\n    padding: 0.75rem;\n    text-align: center;\n    border-bottom: 1px solid #eee;\n    vertical-align: middle;\n  }\n\n  .verb-table th {\n    background: #ff6f61;\n    color: white;\n    font-size: 1.1rem;\n    position: sticky;\n    top: 0;\n    z-index: 1;\n  }\n\n  .emoji {\n    font-size: 1.5rem;\n    margin-right: 0.5rem;\n    vertical-align: middle;\n  }\n</style>\n","<script>\n  import Router from \"svelte-spa-router\";\n  import MainScreen from \"./MainScreen.svelte\";\n  import VerbListPage from \"./VerbListPage.svelte\";\n\n  // Define routes\n  const routes = {\n    \"/\": MainScreen,\n    \"/verb-list\": VerbListPage,\n  };\n</script>\n\n<Router {routes} />\n","import App from './components/App.svelte';\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"],"names":["noop","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","set_input_value","input","construct_svelte_component","component","props","current_component","set_current_component","get_current_component","Error","createEventDispatcher","type","detail","cancelable","callbacks","$$","bubbles","e","createEvent","initCustomEvent","custom_event","slice","call","defaultPrevented","bubble","this","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","schedule_update","then","flush","tick","add_render_callback","push","seen_callbacks","Set","flushidx","saved_component","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","get_spread_update","levels","updates","to_null_out","accounted_for","$$scope","n","key","undefined","get_spread_object","spread_props","create_component","mount_component","customElement","m","new_on_destroy","on_mount","map","filter","on_destroy","destroy_component","filtered","targets","indexOf","flush_render_callbacks","init","instance","create_fragment","not_equal","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","fill","make_dirty","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","index","splice","$set","$$props","obj","$$set","keys","subscriber_queue","readable","start","subscribe","writable","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","size","derived","stores","initial_value","single","isArray","stores_array","auto","started","values","pending","cleanup","sync","result","unsubscribers","store","unsub","unsubscribe","switch_instance_spread_levels","params","getLocation","hashPosition","window","location","href","substr","qsPosition","querystring","loc","_loc","async","charAt","history","replaceState","state","__svelte_spa_router_scrollX","scrollX","__svelte_spa_router_scrollY","scrollY","hash","routes","prefix","restoreScrollState","RouteItem","constructor","path","_sveltesparouter","RegExp","pattern","str","loose","tmp","ext","arr","split","shift","substring","parse","conditions","userData","_pattern","_keys","match","startsWith","matches","exec","out","decodeURIComponent","checkConditions","routesList","route","componentParams","dispatch","dispatchNextTick","previousScrollState","popStateChanged","scrollTo","lastLoc","componentObj","unsubscribeLoc","newLoc","$$invalidate","loading","loadingParams","loaded","default","onDestroy","scrollRestoration","verbs","infinitive","past","participle","emoji","themeColor","GameState","currentPhase","score","unlockedPhases","storage","localStorage","getItem","setItem","phaseVerbs","load","saved","phase","unlocked","JSON","save","stringify","getPhaseVerbs","allVerbs","console","log","newVerbsStart","newVerbsEnd","newVerbs","previousVerbs","reviewVerbs","getRandomVerbs","verb","normalizeVerb","verbsArray","count","sort","Math","random","checkPhaseProgress","newScore","infinitiveKey","replace","pastKey","participleKey","displayInfinitive","displayPast","displayParticiple","getDisplayForms","unlockNextPhase","nextPhase","includes","FillInTheBlanksQuestion","getRandomForm","forms","floor","generate","revealed","answerForms","f","template","createTemplate","answers","getAnswers","answerIndex","flatMap","form","elements","toUpperCase","placeholder","expected","check","userAnswers","correctAnswers","every","answer","trim","toLowerCase","getHint","attempts","revealedChars","max","char","join","QuestionManager","questionTypes","generateQuestion","error","getRandomVerb","questionData","checkAnswer","currentQuestion","isCorrect","normalizedAnswer","correctAnswer","t6_value","t10_value","each_value_2","create_if_block_2","div5","div3","div0","div1","div2","div4","button","t0","t0_value","t6","t10","t1_value","t12_value","div","h2","table","thead","tbody","t1","t12","t_value","span","t","input_placeholder_value","create_if_block_4","create_if_block_5","create_if_block_6","each_value_1","t2_value","t4_value","tr","td0","strong","td1","td2","t2","t4","create_if_block_1","create_if_block","gameState","questionManager","gameStarted","showHint","initializeGame","nextQuestion","inputCount","normalizedAnswers","part","h1","button0","button1","t8_value","td3","MainScreen","VerbListPage","body"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}